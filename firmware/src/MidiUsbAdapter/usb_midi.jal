-- Title: USB MIDI 
-- Author: Robson Martins, Copyright (c) 2012, all rights reserved.
-- Adapted-by: 
-- Compiler: >=2.4k
-- Revision: $Revision$
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the ZLIB license
-- (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: The library implements a simple USB-MIDI single cable device,
-- using the USB MIDI Class specification.
-- MIDI parsing code inspired in the
-- Midi-Nator Project (Nuts and Volts, Aug/2005) 
--
-- Sources:
-- http://www.usb.org/developers/devclass_docs/midi10.pdf
-- http://www.nutsvolts.com/index.php?/magazine/article/the_midi_nator
--
-- By default nothing has to be defined by the user, below
-- an example how to use the library
-- --                                                                        
-- include usb_midi
-- ..
-- usb_midi_init()
-- ..
-- ;-- main loop
-- var byte ch
-- forever loop
-- ;   -- call the flush routine on a regular base in the main loop
-- ;   -- in order to keep the USB communicaiton alive
--     usb_midi_flush()
--     if ( usb_midi_read( ch ) )
--         usb_midi_write( ch ) -- echo MIDI Out to MIDI In
--     end if
--        .....
-- end loop
-- --                                                                        
-- customization
-- The usb_midi library offers the following custimization parameters, 
-- the user has the ability to set these const parameter(s) before the 
-- inclusion of the usb_midi file
-- --                                                                        
-- const word USB_MIDI_PRODUCT_ID = 0x????   -- set USB device product ID
-- const word USB_MIDI_VENDOR_ID = 0x????    -- set USB device vendor ID
-- const byte USB_STRING0[] = { .. }         -- set USB language string
-- const byte USB_STRING1[] = { .. }         -- set USB mfg string
-- const byte USB_STRING2[] = { .. }         -- set USB product string
--                                                                        
-- Notes: -
--                                                                        

-- -----------------------------------------------------------------------
-- -- consts to enable debugging
-- -----------------------------------------------------------------------
if defined( USB_MIDI_DEBUG ) == true then
   const HAS_SERIAL_DEBUG_PORT = true
   const USB_MIDI_DEBUG = true
   const USB_DEBUG = 1
   const USB_DEBUG_HIGH = 1
   const USB_MIDI_DEBUG_HIGH = true
else   
   const HAS_SERIAL_DEBUG_PORT = false
   const USB_MIDI_DEBUG = false
   const USB_MIDI_DEBUG_HIGH = false
end if

if HAS_SERIAL_DEBUG_PORT then

   if defined( serial_hw_baudrate ) == false then
      const serial_hw_baudrate = 115_200
   end if
   
   include serial_hardware
   include format
   include print
   
   -- intialze serial device
   serial_hw_init()

   procedure serial_print_spc() is 
      serial_hw_write( " " )
   end procedure

   procedure serial_newline() is
      serial_hw_write( 10 )
      -- serial_hw_write( 13 )
   end procedure
end if

-- -----------------------------------------------------------------------
-- -- include USB Definitions
-- -----------------------------------------------------------------------
include usb_defs

-- -----------------------------------------------------------------------
-- -- Setup USB endpoints, two enpoints are required for a MIDI class
-- -- The default control enpoint
-- -- And the bulk endpoint
-- -----------------------------------------------------------------------
const bit USB_EP0 = 1

const byte USB_EP0_OUT_SIZE = 8
const word USB_EP0_OUT_ADDR = ( USB_BASE_ADDRESS + 0x0020 )
const byte USB_EP0_IN_SIZE  = 8
const word USB_EP0_IN_ADDR  = ( USB_EP0_OUT_ADDR + USB_EP0_OUT_SIZE )

var volatile byte usb_ep0out_buf[ USB_EP0_OUT_SIZE ] at USB_EP0_OUT_ADDR
var volatile byte usb_ep0in_buf[ USB_EP0_IN_SIZE ] at USB_EP0_IN_ADDR

const bit USB_EP1 = 1
const byte USB_EP1_OUT_SIZE = 64
const word USB_EP1_OUT_ADDR = ( USB_BASE_ADDRESS + 0x0030 )
const byte USB_EP1_IN_SIZE  = 64
const word USB_EP1_IN_ADDR  = ( USB_EP1_OUT_ADDR + USB_EP1_OUT_SIZE )

var volatile byte usb_ep1out_buf[ USB_EP1_OUT_SIZE ] at USB_EP1_OUT_ADDR
var volatile byte usb_ep1in_buf[ USB_EP1_IN_SIZE ] at USB_EP1_IN_ADDR

const bit USB_EP2 = 0
const bit USB_EP3 = 0

-- -----------------------------------------------------------------------
const byte USB_MIDI_BULK_OUT_EP_SIZE = USB_EP1_OUT_SIZE
const byte USB_MIDI_BULK_IN_EP_SIZE  = USB_EP1_IN_SIZE

const word USB_MIDI_BULK_OUT_EP_ADDR = USB_EP1_OUT_ADDR
const word USB_MIDI_BULK_IN_EP_ADDR = USB_EP1_IN_ADDR

-- -----------------------------------------------------------------------
-- -- define the buffer in dual port of the USB SIE, so data is
-- -- accessible from the JAL code 
-- -----------------------------------------------------------------------
var volatile byte usb_midi_eptx_buffer[ USB_EP1_IN_SIZE ] at USB_EP1_IN_ADDR
var volatile byte usb_midi_eprx_buffer[ USB_EP1_OUT_SIZE ] at USB_EP1_OUT_ADDR

alias midi_out_stat is usb_bd1out_stat
alias midi_out_cnt is usb_bd1out_cnt
alias midi_out_addr is usb_bd1out_addr
alias midi_out_addrl is usb_bd1out_addrl
alias midi_out_addrh is usb_bd1out_addrh

alias midi_in_stat is usb_bd1in_stat
alias midi_in_cnt is usb_bd1in_cnt
alias midi_in_addr is usb_bd1in_addr
alias midi_in_addrl is usb_bd1in_addrl
alias midi_in_addrh is usb_bd1in_addrh

-- -----------------------------------------------------------------------
-- -- USB_MIDI_DATA_ENDPOINT specifies the USB MIDI Data end point
-- -- This usb_midi library uses end point 1
-- -----------------------------------------------------------------------
const byte USB_MIDI_DATA_ENDPOINT = 1

-- -----------------------------------------------------------------------
-- -- USB/MIDI class Descriptors related constants
-- -----------------------------------------------------------------------
-- Descriptor type: class specific endpoint
const byte USB_DT_CS_ENDPOINT = 0x25

-- Audio Interface Class Code
const byte USB_AUDIO_INTF = 0x01
-- Audio Control Subclass Code
const byte USB_AUDIO_CONTROL = 0x01
-- MIDI Streaming Subclass Code
const byte USB_MIDISTREAMING = 0x03
-- MIDI IN Jack Subtype
const byte USB_MIDI_IN_JACK = 0x02
-- MIDI OUT Jack Subtype
const byte USB_MIDI_OUT_JACK = 0x03
-- MIDI Jack Type
const byte USB_MIDI_JACK_EMBEDDED = 0x01
-- MIDI Jack Type
const byte USB_MIDI_JACK_EXTERNAL = 0x02

-- -----------------------------------------------------------------------
-- Number of bytes which should be sent
-- 0: Invalid/reserved event
-- 1: Invalid/reserved event
-- 2: Two-byte system common messages like MTC, Song Select, etc.
-- 3: Three-byte system common messages like SPP, etc.
-- 4: SysEx starts or continues
-- 5: Single-byte system common message or sysex sends with following one byte
-- 6: SysEx sends with following two bytes
-- 7: SysEx sends with following three bytes
-- 8: Note Off
-- 9: Note On
-- a: Poly-Key Press
-- b: Control Change
-- c: Program Change
-- d: Channel Pressure
-- e: PitchBend Change
-- f: Single byte                        
-- --                                       0 1 2 3 4 5 6 7 8 9 a b c d e f
const byte USB_MIDI_BYTES_TO_SEND[ 16 ] = { 0,0,2,3,3,1,2,3,3,3,3,3,2,2,3,1 }

-- Number of expected bytes for midi event -1
--   2, Note On
--   2, Note Off
--   2, Poly Pressure
--   2, Controller
--   1, Program Change
--   1, Channel Pressure
--   2, Pitch Bender
--   0, System Message - must be zero
const byte USB_MIDI_EXPECTED_BYTES_COMMON[ 8 ] = { 2,2,2,2,1,1,2,0 }
-- Number of expected bytes for a MIDI system event - 1
--   1, SysEx Begin (endless until SysEx End F7)
--   1, MTC Data frame
--   2, Song Position
--   1, Song Select
--   0, Reserved
--   0, Reserved
--   0, Request Tuning Calibration
--   0, SysEx End
-- Note: just only for documentation,
-- Realtime Messages don't change the running status
--   0, MIDI Clock
--   0, MIDI Tick
--   0, MIDI Start
--   0, MIDI Continue
--   0, MIDI Stop
--   0, Reserved
--   0, Active Sense
--   0, Reset                                
const byte USB_MIDI_EXPECTED_BYTES_SYSTEM[ 16 ] =
-- -- 0 1 2 3 4 5 6 7 8 9 A B C D E F
    { 1,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0 }

-- -----------------------------------------------------------------------
-- -- FIFO for data to send to host
-- -- Size of fifo
const byte USB_MIDI_IN_FIFO_SIZE = 64
-- -- Buffer (fifo)
var volatile byte usb_midi_in_buf[ USB_MIDI_IN_FIFO_SIZE + 1 ]
-- -- Write pointer index
var volatile byte usb_midi_in_wr = 0
-- -- Read pointer index
var volatile byte usb_midi_in_rd = 0

-- -----------------------------------------------------------------------
-- -- FIFO for data received from host
-- -- Size of fifo
const byte USB_MIDI_OUT_FIFO_SIZE = 64
-- -- Buffer (fifo)
var volatile byte usb_midi_out_buf[ USB_MIDI_OUT_FIFO_SIZE + 1 ]
-- -- Write pointer index
var volatile byte usb_midi_out_wr = 0
-- -- Read pointer index
var volatile byte usb_midi_out_rd = 0

-- -----------------------------------------------------------------------
-- -- variables used to parse midi messages
var byte midi_status = 0
var byte midi_expected = 0
var byte midi_byte0 = 0
var byte midi_byte1 = 0
var byte midi_byte2 = 0
var byte midi_cable = 0
var byte midi_wait = 0
var byte midi_sysex = 0

var byte midi_n_data = 0xFF
var byte midi_packet[ 4 ]
var byte midi_packet_idx = 1

-- -----------------------------------------------------------------------

if defined( USB_MIDI_VENDOR_ID ) == false then
-- -----------------------------------------------------------------------
-- USB_MIDI_VENDOR_ID is set to Microchip if const is not defined by 
-- the user of the usb_midi library. One can set the USB_MIDI_VENDOR_ID
-- by defining the const before inclusion of the usb_midi library
-- -----------------------------------------------------------------------
const word USB_MIDI_VENDOR_ID = 0x04D8
end if

if defined( USB_MIDI_PRODUCT_ID ) == false then
-- -----------------------------------------------------------------------
-- USB_MIDI_PRODUCT_ID is set to Microchip Audio MIDI Example if const is
-- not defined by the user of the usb_midi library can set the
-- USB_MIDI_PRODUCT_ID by defining the const before inclusion of the
-- usb_midi library
-- -----------------------------------------------------------------------
const word USB_MIDI_PRODUCT_ID = 0x0059
end if


if defined( USB_DEVICE_DESCRIPTOR ) == false then
-- -----------------------------------------------------------------------
-- Sets the default USB_DEVICE_DESCRIPTOR record. It is not expected
-- that the user of the usb_midi library needs to create its own
-- record. However, if needed in exeptional cases, the user has the
-- ability to define the 
-- const byte USB_DEVICE_DESCRIPTOR[USB_DEVICE_DESCRIPTOR_SIZE]
-- before inclusion of the usb_midi library
-- -----------------------------------------------------------------------
const byte USB_DEVICE_DESCRIPTOR[ USB_DEVICE_DESCRIPTOR_SIZE ] = {
   USB_DEVICE_DESCRIPTOR_SIZE,    -- 18 bytes long
   USB_DT_DEVICE,       -- DEVICE 01h
   0x00,
   0x02,            -- usb version 2.00
   0x00,              -- Device defined at Interface level.
   0x00,            -- subclass
   0x00,            -- protocol
   0x08,            -- max packet size for end point 0
   byte( USB_MIDI_VENDOR_ID & 0xFF  ),
   byte( USB_MIDI_VENDOR_ID >> 8    ),      -- USB vendor ID
   byte( USB_MIDI_PRODUCT_ID & 0xFF ),
   byte( USB_MIDI_PRODUCT_ID >> 8   ),      -- USB product ID
   0x00,
   0x01,            -- Device release number in BCD format
   0x01,            -- string 1 for manufacturer
   0x02,            -- string 2 for product
   0x00,            -- string 3 for serial number
   0x01            -- number of configurations
}
end if


if defined( USB_CONFIGURATION_DESCRIPTOR ) == false then
const USB_CONFIGURATION_DESCRIPTOR_SIZE = 0x09 + 0x09 + 0x09 + 0x09 + 0x07 +
                                          0x06 + 0x06 + 0x09 + 0x09 + 0x09 +
                                          0x05 + 0x09 + 0x05

-- -----------------------------------------------------------------------
-- Sets the default USB_CONFIGURATION_DESCRIPTOR record. It is not expected
-- that the user of the usb_serial library needs to create its own
-- record. However, if needed in exeptional cases, the user has the
-- ability to define the const byte USB_CONFIGURATION_DESCRIPTOR[]
-- before inclusion of the usb_serial library to customize the USB
-- conifguration
-- -----------------------------------------------------------------------
const byte USB_CONFIGURATION_DESCRIPTOR[ USB_CONFIGURATION_DESCRIPTOR_SIZE ]=
{   
   -- configuration descriptor - - - - - - - - - - 0x09 bytes
   0x09,   -- length,
   USB_DT_CONFIGURATION,   -- descriptor_type

   USB_CONFIGURATION_DESCRIPTOR_SIZE,
   0x00,   -- total_length;
   
   0x02,   -- num_interfaces,
   0x01,   -- configuration_value,
   0x00,   -- configuration_string_id,
   0x80,   -- attributes (bus powered, no remote wake up)
   50,      -- max_power; (2x ma)
   
   -- Standard AC Interface Descriptor - - - - - - 0x09 bytes
   0x09,   -- length,
   USB_DT_INTERFACE,   -- descriptor_type,
   0x00,   -- interface_number, (starts at zero)
   0x00,   -- alternate_setting, (no alternatives)
   0x00,   -- num_endpoints,
   USB_AUDIO_INTF,       -- interface_class, (AUDIO)
   USB_AUDIO_CONTROL,   -- interface_subclass, (AUDIO_CONTROL interface)
   0x00,   -- interface_protocol
   0x00,   -- interface_string_id;
   
   -- Class-specific AC Interface Descriptor - - - 0x09 bytes
   0x09,   -- length,
   USB_DT_CS_INTERFACE, -- descriptor_type,
   0x01,   -- descriptor subtype
   0x00,   
   0x01,   -- Revision of class specification - 1.0
   0x09,   
   0x00,   -- Total size of class specific descriptors.
   0x01,   -- Number of streaming interfaces.
   0x01,   -- MIDIStreaming interface 1 belongs to this AudioControl interface.
   
   -- Standard MS Interface Descriptor - - - - - - 0x09 bytes
   0x09,   -- length,
   USB_DT_INTERFACE,   -- descriptor_type,
   0x01,   -- interface_number, (starts at zero)
   0x00,   -- alternate_setting, (no alternatives)
   0x02,   -- num_endpoints,
   USB_AUDIO_INTF,   -- interface_class, (AUDIO)
   USB_MIDISTREAMING,   -- interface_subclass, (MIDISTREAMING interface)
   0x00,   -- interface_protocol
   0x00,   -- interface_string_id;
   
   -- Class-specific MS Interface Descriptor - - - 0x07 bytes
   0x07,   -- length,
   USB_DT_CS_INTERFACE,   -- descriptor_type,
   0x01,   -- descriptor subtype
   0x00,   
   0x01,   -- Revision of class specification - 1.0
   0x41,   
   0x00,   -- Total size of class-specific descriptors.

   -- MIDI Adapter MIDI IN Jack Descriptor (Embedded) - 0x06 bytes   
   0x06,   -- length,
   USB_DT_CS_INTERFACE,   -- descriptor_type,
   USB_MIDI_IN_JACK,       -- descriptor subtype
   USB_MIDI_JACK_EMBEDDED,   
   0x01,   -- ID of this Jack.
   0x00,   

   -- MIDI Adapter MIDI IN Jack Descriptor (External) - 0x06 bytes   
   0x06,   -- length,
   USB_DT_CS_INTERFACE,   -- descriptor_type,
   USB_MIDI_IN_JACK,       -- descriptor subtype
   USB_MIDI_JACK_EXTERNAL,   
   0x02,   -- ID of this Jack.
   0x00,   

   -- MIDI Adapter MIDI OUT Jack Descriptor (Embedded) - 0x09 bytes
   0x09,   -- length,
   USB_DT_CS_INTERFACE,   -- descriptor_type,
   USB_MIDI_OUT_JACK,       -- descriptor subtype
   USB_MIDI_JACK_EMBEDDED,   
   0x03,   -- ID of this Jack.
   0x01,   -- Number of Input Pins of this Jack.
   0x02,   -- ID of the Entity to which this Pin is connected.
   0x01,   -- Output Pin number of the Entity to which this
           -- Input Pin is connected.
   0x00,
   
   -- MIDI Adapter MIDI OUT Jack Descriptor (External) - 0x09 bytes
   0x09,   -- length,
   USB_DT_CS_INTERFACE,   -- descriptor_type,
   USB_MIDI_OUT_JACK,       -- descriptor subtype
   USB_MIDI_JACK_EXTERNAL,   
   0x04,   -- ID of this Jack.
   0x01,   -- Number of Input Pins of this Jack.
   0x01,   -- ID of the Entity to which this Pin is connected.
   0x01,   -- Output Pin number of the Entity to which this
           -- Input Pin is connected.
   0x00,
   
   -- MIDI Adapter Standard Bulk OUT Endpoint Descriptor - 0x09 bytes
   0x09,               -- length,
   USB_DT_ENDPOINT,      -- descriptor_type,
   0x01,                -- endpoint_address, (Endpoint 1, OUT)
   USB_EPT_BULK,         -- attributes
   0x40,            
   0x00,               -- max_packet_size
   0x00,               -- interval
   0x00,
   0x00,
   
   -- MIDI Adapter Class-specific Bulk OUT Endpoint Descriptor - 0x05 bytes
   0x05,   -- length,
   USB_DT_CS_ENDPOINT,   -- descriptor_type,
   0x01,   -- descriptor subtype
   0x01,   -- Number of embedded MIDI IN Jacks.
   0x01,   -- ID of the Embedded MIDI IN Jack.
   
   -- MIDI Adapter Standard Bulk IN Endpoint Descriptor - 0x09 bytes
   0x09,               -- length,
   USB_DT_ENDPOINT,      -- descriptor_type,
   0x81,                -- endpoint_address, (Endpoint 1, IN)
   USB_EPT_BULK,         -- attributes
   0x40,            
   0x00,               -- max_packet_size
   0x00,               -- interval
   0x00,
   0x00,

   -- MIDI Adapter Class-specific Bulk IN Endpoint Descriptor - 0x05 bytes
   0x05,   -- length,
   USB_DT_CS_ENDPOINT,   -- descriptor_type,
   0x01,   -- descriptor subtype
   0x01,   -- Number of embedded MIDI OUT Jacks.
   0x03   -- ID of the Embedded MIDI OUT Jack.
}

end if

if defined( USB_STRING0 ) == false then
-- -----------------------------------------------------------------------
-- USB_STRING0 shall contain the USB strings language ID
-- The user has the ability to define the string content of 
-- USB_STRING0 before inclusion of the usb_midi library to 
-- override the default content ( 0x0904 ).
-- note that the USB shall contain 16 bit unicode characters, little endian
-- encoded, and that the first field of USB_STRING0 shall contain the size
-- of the entire USB_STRING0 array, the second byte shall be set to  
-- USB_DT_STRING (=0x03).
-- -----------------------------------------------------------------------
const byte USB_STRING0[] = 
{
   0x04,   -- bLength
   USB_DT_STRING,   -- bDescriptorType
   0x09,   -- wLANGID[0] (low byte)
   0x04   -- wLANGID[0] (high byte)
}
end if


if defined( USB_STRING1 ) == false then
-- -----------------------------------------------------------------------
-- USB_STRING1 shall contain the USB device descriptor string
-- The user has the ability to define the string content of 
-- USB_STRING1 before inclusion of the usb_midi library to 
-- override the default content ("Microchip Technology Inc.").
-- note that the USB shall contain 16 bit unicode characters, little endian
-- encoded, and that the first field of USB_STRING1 shall contain the size
-- of the entire USB_STRING1 array, the second byte shall be set to  
-- USB_DT_STRING (=0x03).
-- -----------------------------------------------------------------------
const byte USB_STRING1[ 0x36 ] = 
{
   0x36,   -- bLength
   USB_DT_STRING,   -- bDescriptorType
   "M", 0x00, 
   "i", 0x00, 
   "c", 0x00, 
   "r", 0x00, 
   "o", 0x00, 
   "c", 0x00, 
   "h", 0x00, 
   "i", 0x00, 
   "p", 0x00, 
   " ", 0x00,
   "T", 0x00, 
   "e", 0x00, 
   "c", 0x00, 
   "h", 0x00, 
   "n", 0x00, 
   "o", 0x00, 
   "l", 0x00, 
   "o", 0x00, 
   "g", 0x00, 
   "y", 0x00, 
   ",", 0x00, 
   " ", 0x00,
   "I", 0x00, 
   "n", 0x00, 
   "c", 0x00, 
   ".", 0x00
}
end if

if defined( USB_STRING2 ) == false then
-- -----------------------------------------------------------------------
-- USB_STRING2 shall contain the USB product descriptor string
-- The user has the ability to define the string content of 
-- USB_STRING1 before inclusion of the usb_midi library to 
-- override the default content ("JAL USB-MIDI").
-- note that the USB shall contain 16 bit unicode characters, little endian
-- encoded, and that the first field of USB_STRING1 shall contain the size
-- of the entire USB_STRING2 array, the second byte shall be set to  
-- USB_DT_STRING (=0x03).
-- -----------------------------------------------------------------------
const byte USB_STRING2[ 26 ] = 
{
   26,   -- bLength
   USB_DT_STRING,   -- bDescriptorType
   "J", 0x00, 
   "A", 0x00, 
   "L", 0x00, 
   " ", 0x00, 
   "U", 0x00, 
   "S", 0x00, 
   "B", 0x00, 
   "-", 0x00, 
   "M", 0x00, 
   "I", 0x00, 
   "D", 0x00, 
   "I", 0x00 
}
end if

-- -----------------------------------------------------------------------
-- -- include reset of USB driver libraries
-- -----------------------------------------------------------------------
include usb_drv_core

-- -----------------------------------------------------------------------
-- -- FIFO interface
-- -- MIDI-USB OUT FIFO

-- Reads one byte from MIDI-USB out FIFO
function _usb_midi_out_data'get() return byte is
   var byte data
   var byte pntr
   if ( usb_midi_out_rd == usb_midi_out_wr ) then
      -- queue is empty
      return 0
   end if
   ; data in queue
   data = usb_midi_out_buf[ usb_midi_out_rd ]
   pntr = usb_midi_out_rd + 1
   if ( pntr > USB_MIDI_OUT_FIFO_SIZE ) then
      pntr = 0
   end if  
   usb_midi_out_rd = pntr
   return data
end function

-- Writes one byte to MIDI-USB out FIFO
procedure _usb_midi_out_data'put(byte in data) is
   var byte pntr = usb_midi_out_wr + 1
   if ( pntr > USB_MIDI_OUT_FIFO_SIZE ) then
      pntr = 0
   end if
   if ( pntr == usb_midi_out_rd ) then
      -- queue full
      return
   end if
   usb_midi_out_buf[ usb_midi_out_wr ] = data
   usb_midi_out_wr = pntr
end procedure

-- Returns if MIDI-USB out FIFO is empty
function _usb_midi_out_fifo_is_empty() return bit is
    return ( usb_midi_out_wr == usb_midi_out_rd ) 
end function

-- Returns if MIDI-USB out FIFO is full
function _usb_midi_out_fifo_is_full() return bit is
   var byte pntr = usb_midi_out_wr + 1
   if ( pntr > USB_MIDI_OUT_FIFO_SIZE ) then
      pntr = 0
   end if
   return ( pntr == usb_midi_out_rd )
end function

-- Returns number of used bytes in MIDI-USB out FIFO
function _usb_midi_out_fifo_nr_used() return byte is
   if ( usb_midi_out_wr <  usb_midi_out_rd ) then 
      return ( usb_midi_out_wr - usb_midi_out_rd + USB_MIDI_OUT_FIFO_SIZE )
   end if      
   return usb_midi_out_wr - usb_midi_out_rd
end function

-- Clears the MIDI-USB out FIFO
procedure _usb_midi_out_fifo_clear() is
   usb_midi_out_wr = 0
   usb_midi_out_rd = 0
end procedure

-- -----------------------------------------------------------------------
-- -- MIDI-USB IN FIFO
-- Reads one byte from MIDI-USB in FIFO
function _usb_midi_in_data'get() return byte is
   var byte data
   var byte pntr
   if ( usb_midi_in_rd == usb_midi_in_wr ) then
      -- queue is empty
      return 0
   end if
   ; data in queue
   data = usb_midi_in_buf[ usb_midi_in_rd ]
   pntr = usb_midi_in_rd + 1
   if ( pntr > USB_MIDI_IN_FIFO_SIZE ) then
      pntr = 0
   end if  
   usb_midi_in_rd = pntr
   return data
end function

-- Writes one byte to MIDI-USB in FIFO
procedure _usb_midi_in_data'put(byte in data) is
   var byte pntr = usb_midi_in_wr + 1
   if ( pntr > USB_MIDI_IN_FIFO_SIZE ) then
      pntr = 0
   end if
   if ( pntr == usb_midi_in_rd ) then
      -- queue full
      return
   end if
   usb_midi_in_buf[ usb_midi_in_wr ] = data
   usb_midi_in_wr = pntr
end procedure

-- Returns if MIDI-USB in FIFO is empty
function _usb_midi_in_fifo_is_empty() return bit is
    return ( usb_midi_in_wr == usb_midi_in_rd ) 
end function

-- Returns if MIDI-USB in FIFO is full
function _usb_midi_in_fifo_is_full() return bit is
   var byte pntr = usb_midi_in_wr + 1
   if ( pntr > USB_MIDI_IN_FIFO_SIZE ) then
      pntr = 0
   end if
   return ( pntr == usb_midi_in_rd )
end function

-- Returns number of used bytes in MIDI-USB in FIFO
function _usb_midi_in_fifo_nr_used() return byte is
   if ( usb_midi_in_wr <  usb_midi_in_rd ) then 
      return ( usb_midi_in_wr - usb_midi_in_rd + USB_MIDI_IN_FIFO_SIZE )
   end if      
   return usb_midi_in_wr - usb_midi_in_rd
end function

-- Clears the MIDI-USB in FIFO
procedure _usb_midi_in_fifo_clear() is
   usb_midi_in_wr = 0
   usb_midi_in_rd = 0
end procedure

-- -----------------------------------------------------------------------
-- Sends (bulk) data to USB EP1 (MIDI data)
procedure _usb_midi_send_data() is
   -- anything to send?
   if ( !_usb_midi_in_fifo_is_empty() ) then
      -- send data
      usb_send_data(USB_MIDI_DATA_ENDPOINT, usb_midi_in_buf,
                    _usb_midi_in_fifo_nr_used(), false)
      _usb_midi_in_fifo_clear()
   end if
end procedure

-- -----------------------------------------------------------------------
-- USB Endpoint Out Data callback procedure
procedure usb_ep_data_out_callback(byte in end_point, word in buffer_addr,
                                   byte in byte_count) is
    pragma inline
    if USB_MIDI_DEBUG_HIGH then
        const byte str[] = " MIDI EP data out: "
        const byte str1[] = " bytes "
        print_string(serial_hw_data,str)
        print_byte_hex(serial_hw_data,byte_count)
        print_string(serial_hw_data,str1)
    end if
    var byte transf_size = USB_EP1_OUT_SIZE
    -- We have some data!
    if ( end_point == USB_MIDI_DATA_ENDPOINT ) then
        -- it's the data end point
      var byte src_ptr[2] AT buffer_addr
      transf_size = 0
      FSR1L = src_ptr[0]
      FSR1H = src_ptr[1]
      for byte_count loop
         if ( _usb_midi_out_fifo_is_full() ) then
         	exit loop
         end if
         var byte ch = POSTINC1
         _usb_midi_out_data = ch
         transf_size = transf_size + 1
      end loop
    else
        if USB_MIDI_DEBUG_HIGH then
            const byte str[] = "data for ep "
            print_string(serial_hw_data,str)
            print_byte_hex(serial_hw_data,end_point)
        end if
    end if
   usb_prime_epx_out(USB_MIDI_DATA_ENDPOINT, transf_size)
end procedure

-- -----------------------------------------------------------------------
-- -- include USB driver library
-- -----------------------------------------------------------------------
include usb_drv

-- -----------------------------------------------------------------------
-- usb_midi_flush shall be called on a regular base (millisecond range)
-- in order to keep the USB communcation alive. Therfore it is adviced to
-- call the usb_midi_flush procedure in the main loop of your 
-- application
-- -----------------------------------------------------------------------
procedure usb_midi_flush() is    
   pragma inline
    usb_handle_isr()
end procedure

-- -----------------------------------------------------------------------
-- usb_midi_init setup the USB MIDI communication with the HOST 
-- -----------------------------------------------------------------------
-- usb_midi_init will setup the USB MIDI communication with the HOST, 
-- however, this can be a time consuming process, therefore this call 
-- is non blocking. In order to check if communication with the HOST 
-- has been established, one can call the usb_is_configured() function, see
-- usb_is_configured() documentation for additional details.
-- -----------------------------------------------------------------------
procedure usb_midi_init() is
   -- setup the USB device
   usb_setup()
   -- enable USB device
   usb_enable_module()
end procedure

-- -----------------------------------------------------------------------
-- usb_midi_read - read MIDI-USB data if available (non-blocking)
-- -----------------------------------------------------------------------   
-- Returns true if a MIDI-USB data has been received from host,
-- otherwise returns false.
-- If function returns true, the data variable is valid,
-- and contains the data that has been received.
-- In other cases the data variable is not defined
-- -----------------------------------------------------------------------
function usb_midi_read(byte out data) return bit is
   if ( _usb_midi_out_fifo_is_empty() ) then
      return false
   end if
   data = _usb_midi_out_data
   return true
end function

-- -----------------------------------------------------------------------
-- usb_midi_write - write MIDI-USB data to the USB port, blocking
-- -----------------------------------------------------------------------
-- Asynchronuous serial send routine, using the USB MIDI class
-- Sends buffer to the USB host
-- -----------------------------------------------------------------------
procedure usb_midi_write(byte in data[], byte in size) is
   var byte idx
   for size using idx loop
      if ( _usb_midi_in_fifo_is_full() ) then
         _usb_midi_send_data()
      end if
      _usb_midi_in_data = data[ idx ]
   end loop 
   if ( !_usb_midi_in_fifo_is_empty() ) then
      _usb_midi_send_data()
   end if
end procedure

-- -----------------------------------------------------------------------
-- usb_midi_parsed_read - parse MIDI packets and read standard MIDI data
-- if available (non-blocking)
-- -----------------------------------------------------------------------   
-- Returns true if a MIDI data has been received, otherwise returns false.
-- If function returns true, the data variable is valid,
-- and contains the data that has been received.
-- In other cases the data variable is not defined
-- -----------------------------------------------------------------------
function usb_midi_parsed_read(byte out data) return bit is
   if ( _usb_midi_out_fifo_nr_used() < 4 ) then
      return false
   end if
   if ( midi_n_data == 0xFF ) then
      midi_packet[0] = _usb_midi_out_data
      midi_packet[1] = _usb_midi_out_data
      midi_packet[2] = _usb_midi_out_data
      midi_packet[3] = _usb_midi_out_data
      midi_n_data = USB_MIDI_BYTES_TO_SEND[ midi_packet[0] & 0x0F ]
      midi_packet_idx = 1
   end if
   if ( midi_n_data == 0 ) then
      midi_n_data = 0xFF
      return false
   end if
   if ( midi_n_data > 0 ) then
      data = midi_packet[ midi_packet_idx ]
      midi_n_data = midi_n_data - 1
      midi_packet_idx = midi_packet_idx + 1
   end if
   if ( midi_n_data == 0 ) then
      midi_n_data = 0xFF
   end if
   return true
end function

-- -----------------------------------------------------------------------
-- usb_midi_parsed_write - parse MIDI packets and write standard MIDI
-- data to the USB port, blocking
-- -----------------------------------------------------------------------
-- Asynchronuous serial send routine, using the USB MIDI class
-- Sends byte X (8 bit) to the USB host (via MIDI port)
-- -----------------------------------------------------------------------
procedure usb_midi_parsed_write(byte in data) is
   if ( (data & 0x80) != 0 ) then -- new MIDI status byte?
      if ( data < 0xF8 ) then -- is byte < f8 (sysex end or less)
          midi_status = data -- store running status
          -- look up expected bytes
          midi_expected = 
             USB_MIDI_EXPECTED_BYTES_COMMON[ (data >> 4) & 0x07 ]
          if ( midi_expected == 0 ) then
             -- System Message, take number of bytes from
             -- expected_bytes_system[] array
             -- look up expected bytes
             midi_expected = USB_MIDI_EXPECTED_BYTES_SYSTEM[ data & 0x0F ]
             if ( data == 0xF0 ) then
                 midi_byte0 = 0xF0 -- sysex begin
                 midi_sysex = 0x01
              elsif ( data == 0xF7 ) then -- sysex end
                 case midi_sysex of
                    0: block
                       -- 5: SysEx ends with single byte
                     _usb_midi_in_data = ( (midi_cable << 4) | 0x05 )
                     _usb_midi_in_data = (0xF7)
                     _usb_midi_in_data = (0x00)
                     _usb_midi_in_data = (0x00)
                    end block
                    1: block
                       -- 6: SysEx ends with two bytes
                     _usb_midi_in_data = ( (midi_cable << 4) | 0x06 )
                     _usb_midi_in_data = (midi_byte0)
                     _usb_midi_in_data = (0xF7)
                     _usb_midi_in_data = (0x00)
                    end block
                    otherwise block
                       -- 7: SysEx ends with three bytes
                     _usb_midi_in_data = ( (midi_cable << 4) | 0x07 )
                     _usb_midi_in_data = (midi_byte0)
                     _usb_midi_in_data = (midi_byte1)
                     _usb_midi_in_data = (0xF7)
                    end block
                 end case
               _usb_midi_send_data()
                 midi_sysex = 0x00 -- ensure that next F7 will just send F7
             end if
          end if
          midi_wait = midi_expected
       else -- byte not less than f8 (realtime messages)
          -- Realtime messages don't change the running status and
          -- can be sent immediately
         _usb_midi_in_data = ( (midi_cable << 4) | 0x0F )
         _usb_midi_in_data = (data)
         _usb_midi_in_data = (0x00)
         _usb_midi_in_data = (0x00)
         _usb_midi_send_data()
      end if
   else -- data byte
      if ( midi_status == 0xF0 ) then -- part of a sysex message?
         midi_sysex = midi_sysex + 1 
         case midi_sysex of
            1: block -- load mybyte into proper byte in midi structure
               midi_byte0 = data 
            end block 
            2: block
               midi_byte1 = data 
            end block 
               otherwise block 
               midi_byte2 = data 
                 -- If third byte is loaded then prepare and send packet
                 -- 4: SysEx starts or continues
               _usb_midi_in_data = ( (midi_cable << 4) | 0x04 )
               _usb_midi_in_data = (midi_byte0)
               _usb_midi_in_data = (midi_byte1)
               _usb_midi_in_data = (midi_byte2)
               _usb_midi_send_data()
                 midi_sysex = 0x00 -- reset and prepare for next packet
               end block
         end case
      else -- not part of sysex message
         if ( midi_wait == 0 ) then
            midi_wait = midi_expected - 1 -- update wait bytes
         else -- wait_bytes !=0
            midi_wait = midi_wait - 1
         end if
         if ( midi_expected == 1 ) then
            midi_byte1 = data -- if only one byte was expected store it
            midi_byte2 = 0x00
         else -- expected_bytes !=1
            if ( midi_wait == 0 ) then
               midi_byte2 = data -- store in byte 2
            else
               midi_byte1 = data -- store in byte 1
            end if
         end if
         if ( midi_wait == 0 ) then -- is wait bytes = 0 now?
            if ( (midi_status & 0xF0) != 0xF0 ) then
               -- common MIDI message
               _usb_midi_in_data = (
                  (midi_cable << 4) | (midi_status >> 4))
               else
                  case midi_expected of
                     -- SysEx common with one byte
                     0: block 
                     _usb_midi_in_data = ( (midi_cable << 4) | 0x05 )
                     end block
                     -- SysEx common with two bytes
                     1: block
                     _usb_midi_in_data = ( (midi_cable << 4) | 0x02 )
                     end block
                     -- SysEx common with three bytes
                     otherwise block
                     _usb_midi_in_data = ( (midi_cable << 4) | 0x03 )
                     end block
                  end case 
            end if
            _usb_midi_in_data = (midi_status)
            _usb_midi_in_data = (midi_byte1)
            _usb_midi_in_data = (midi_byte2)
            _usb_midi_send_data()
         end if
      end if
   end if
end procedure
